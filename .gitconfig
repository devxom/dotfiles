# Local/private config goes in the include
[include]
	path = ~/.gitconfig.local

[color]
	diff = auto
	status = auto
	branch = auto
	ui = true

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red
	new = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[core]
	excludesfile = ~/.gitignore
	editor = vim
	pager = less -FRSX
	quotepath = false
	autocrlf = input

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[diff]
	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[init]
	defaultBranch = main

[log]
	# https://github.com/git/git/commit/acdd37769de8b0fe37a74bfc0475b63bdc55e9dc
	date = human

[fetch]
	prune = true

[status]
	submoduleSummary = true

[checkout]
	defaultRemote = origin

[pull]
	ff = only
	default = current

[push]
	# push easily. http://stackoverflow.com/a/23918418/89484
	default = current
	followTags = true
	autoSetupRemote = true

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[stash]
	showPatch = true

# faster git server communication.
# like a LOT faster. https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html
[protocol]
	version = 2

[alias]
	co = checkout
	rank-contributors = !$ZSH/bin/git-rank-contributors
	count   = !git shortlog -sn
	
	# add all changed (but not new) files to stage (index):
	au = add -u

	# add untracked, remove deleted, and show status
	adda = !git add -A && git status

	#
	barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -

	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# cleanup repository
	cleanup = !git clean -df && git stash clear

	# show contributors list by name rev
	human = name-rev --name-only --refs=refs/heads/*

	# merge shortcut without fast-forward and without commit
	me = merge --no-commit --no-ff

	# show fork
	# fork = !sh -c 'git rev-list --boundary $1...$2 | grep ^- | cut -c2-'

	# git stash apply and remove from stash
	pop = !git stash apply && git stash clear

	# find conflicts mark in repo
	conflicts = !git grep -e \"^<<<<<<< \\w*.*$\" --or -e \"^=======$\" --or -e \"^>>>>>>> \\w*.*$\" -n3Ep --break --heading

	# recursive pull for submodules
	subpull = !git submodule foreach git pull --tags origin master

	# run local git server
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	# iterative git snapshot throw stash
	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	snapshots = !git stash list --grep snapshot

	# usage example: git w -n5
	w = whatchanged

	# cherry pick shortcut
	pick = cherry-pick

	# show conflicting merge in gitk:
	gitkconflict = !gitk --left-right HEAD...MERGE_HEAD

	# prune all tracking local branches that have been removed from remote:
	prune-all = !git remote | xargs -n 1 git remote prune

	# show full history in gitk (including "deleted" branches and stashes)
	history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )

	# show list of contributors in descending order by number of commits
	rank = shortlog -sn --no-merges

	# given a string for an author, try to figure out full name and email:
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

	# given any git object, try to show it briefly
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# Search for a given string in all patches and print commit messages
	# example: search for any commit that adds or removes string "foobar"
	#     git searchcommits foobar
	# example: search commits for string "foobar" in directory src/lib
	#     git searchcommits foobar src/lib
	# example: search commits for "foobar", print full diff of commit with 1 line context
	#     git searchcommits foobar --pickaxe-all -U1 src/lib
	searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

	# log
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --graph --date=short
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	simple = log --pretty=format:\" * %s\"
	shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

	# show commit for yesterday
	yesterday = log --pretty='tformat:%h %an (%ar): %s' --since=yesterday

	# show last 7 commits
	last = "!git log -7 HEAD --abbrev-commit --date=short --pretty=format:'%h%x00%cd%x00%s%x00%an%x00%d' $@ | gawk -F '\\0' '{ printf \"\\033[31m%s\\033[m \\033[32m%s\\033[m  %-.40s \\033[30;1m%s\\033[m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5 }';"

	# View the current working tree status using the short format
	s = status -s

	# status shortcut
	st = status

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit shortcut
	ci = commit

	# Commit with sign-of and gpg sign
	cs = commit -s -S

	# Commit all changes
	ca = !git add -A && git commit -av

	# Checkout shortcut
	co = checkout

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	s = status
	ts = status # I do the `gi ts` typo all the time
	undocommit = reset HEAD~
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit

	mergeorigin = !"git merge origin/$(git mainormaster)"

	# Essentially GitHub's compare view: show all 'ahead' changes (incl working tree) vs the merge-base
	diffbranch = !"git diff $(git diffbase)"
	# Diff of branch that's not checked out. Doesn't include working tree (but obv doesnt need to)
	diffbranch-that = !"git diff origin/$(git mainormaster)...\"$1\" #"
	# Show commit log of unique commits of this branch (not on main)
	diffcommitsfrommain = !"git log --no-merges origin/$(git mainormaster).."
	#                                                                      ^^ also, 2 vs 3 dots: so important. https://stackoverflow.com/a/48681527

	# Squash a branch to one commit against a branch with many non-main commits.
	# This can't be an alias, but here's the hack.
	#    # be on the new feature branch, be okay with rewriting it's history.
	#    git reset --soft (git merge-base Other_Branch_Name HEAD)

	# Two utils: 
	#   What's the ancestor commit this branch shares with main?
	diffbase = !"git merge-base origin/$(git mainormaster) HEAD"
	#   Is it a `main` or a `master` repo?
	mainormaster = !"git branch --format '%(refname:short)' --sort=-committerdate --list master main | head -n1"

	# fyi to change a git checkout from master to main.. (gh's suggested commands:)
	#    git branch -m master main; git fetch origin; git branch -u origin/main main; git remote set-head origin -a

	# commit (past) WIP changes with a message stating when they happened. (Cuz I sometimes leave changes uncommitted for a while, but want the dates for reference)
	# todo: maybe use `git commit --date=X` to set a past date. would need to pick one, tho.
	commitwip = !"git commit -am \"WIP changes from a while ago. Last modified on:\n$(( git diff --name-only --cached; git ls-files --modified ) | uniq | xargs gstat -c '- %.19y %N')\""